#pragma once

#ifndef M_PI
#define M_PI (3.14159265358979323846)
#endif
#include <math.h> //atan

#include "point.h"
#include "segment.h"

#include <iostream>

class wektor : public point {

	double x{};
	double y{};
	static unsigned int counter_v;
	const unsigned int id{ ++counter_v };

protected:

	double setX(double x)
	{
		return this->x = x;
	}

	///////////////////////////////////////////////////////////////////////////

	double setY(double y)
	{
		return this->y = y;
	}

	///////////////////////////////////////////////////////////////////////////

public:

	wektor();
	wektor(double, double, double, double);
	wektor(double, double);
	wektor(point, point);
	wektor(const wektor& obj);
	wektor(wektor* obj);
	wektor(segment);

	///////////////////////////////////////////////////////////////////////////

	virtual unsigned int get_id()
	{
		return id;
	}

	///////////////////////////////////////////////////////////////////////////

	double getY()
	{
		return this->y;
	}

	///////////////////////////////////////////////////////////////////////////

	double getX()
	{
		return this->x;
	}

	///////////////////////////////////////////////////////////////////////////

	double getAngleRad()
	{
		return atan2l(x, y);
	}
	///////////////////////////////////////////////////////////////////////////
	double getAngleDeg();
	///////////////////////////////////////////////////////////////////////////
	double getMagnitude()
	{
		return sqrtl(powl(x, 2) + powl(y, 2));
	}
	///////////////////////////////////////////////////////////////////////////
	double getAngle2vectors(wektor x);
	///////////////////////////////////////////////////////////////////////////
	friend std::ostream& operator<<(std::ostream&, wektor&);
	///////////////////////////////////////////////////////////////////////////
	virtual void show();
	///////////////////////////////////////////////////////////////////////////
	static void show(wektor*);
	///////////////////////////////////////////////////////////////////////////
	wektor* operator+(wektor);
	///////////////////////////////////////////////////////////////////////////
	virtual ~wektor();
};

